#!/usr/bin/env python3
"""
Debian Trixie Upgrader
--------------------------------------------------

A sophisticated terminal interface for upgrading a Debian system to the stable release "trixie".
Features include:
  • Updating /etc/apt/sources.list and files in /etc/apt/sources.list.d/ to point to "trixie"
  • Fetching new package lists via "apt-get update"
  • Performing a full system upgrade with "apt-get full-upgrade -y"
  • A fully interactive, menu-driven CLI using Rich for a modern user experience
  • A stylish ASCII banner generated by Pyfiglet at startup
  • Comprehensive progress feedback and error handling

Usage:
  Run the script interactively to perform one or more upgrade steps.
  Ensure you are running as root for modifications to system files.

Version: 1.0.0
"""

import os
import sys
import subprocess
import time
import shutil
import signal
from typing import List

try:
    import pyfiglet
    from rich.console import Console
    from rich.text import Text
    from rich.panel import Panel
    from rich.prompt import Prompt, Confirm
    from rich.progress import (
        Progress,
        SpinnerColumn,
        TextColumn,
        BarColumn,
        TaskProgressColumn,
        TimeRemainingColumn,
    )
    from rich.align import Align
    from rich.style import Style
except ImportError:
    print(
        "Required libraries not found. Please install them with: pip install rich pyfiglet"
    )
    sys.exit(1)


# ---------------------------
# Nord-Themed Colors
# ---------------------------
class NordColors:
    POLAR_NIGHT_1: str = "#2E3440"
    POLAR_NIGHT_2: str = "#3B4252"
    POLAR_NIGHT_3: str = "#434C5E"
    POLAR_NIGHT_4: str = "#4C566A"
    SNOW_STORM_1: str = "#D8DEE9"
    SNOW_STORM_2: str = "#E5E9F0"
    SNOW_STORM_3: str = "#ECEFF4"
    FROST_1: str = "#8FBCBB"
    FROST_2: str = "#88C0D0"
    FROST_3: str = "#81A1C1"
    FROST_4: str = "#5E81AC"
    RED: str = "#BF616A"
    ORANGE: str = "#D08770"
    YELLOW: str = "#EBCB8B"
    GREEN: str = "#A3BE8C"
    PURPLE: str = "#B48EAD"


# ---------------------------
# Initialize Rich Console
# ---------------------------
console: Console = Console()

# ---------------------------
# Global Constants
# ---------------------------
APP_NAME: str = "Debian Trixie Upgrader"
APP_SUBTITLE: str = "System Upgrade Utility"
VERSION: str = "1.0.0"
APT_SOURCES_LIST: str = "/etc/apt/sources.list"
APT_SOURCES_DIR: str = "/etc/apt/sources.list.d"
NEW_CODENAME: str = "trixie"
OLD_CODENAME: str = "testing"  # Assumes "testing" is currently used


# ---------------------------
# Utility Functions
# ---------------------------
def create_header() -> Panel:
    """
    Generate an ASCII art header with dynamic styling using Pyfiglet.
    """
    fonts = ["slant", "digital", "big", "banner3-D"]
    ascii_art = ""
    for font in fonts:
        try:
            fig = pyfiglet.Figlet(font=font, width=80)
            ascii_art = fig.renderText(APP_NAME)
            if ascii_art.strip():
                break
        except Exception:
            continue

    # Apply Nord color gradients
    colors = [
        NordColors.FROST_1,
        NordColors.FROST_2,
        NordColors.FROST_3,
        NordColors.FROST_4,
    ]
    styled_text = ""
    for i, line in enumerate(ascii_art.splitlines()):
        color = colors[i % len(colors)]
        styled_text += f"[bold {color}]{line}[/]\n"
    border = f"[{NordColors.FROST_3}]{'━' * 80}[/]"
    styled_text = f"{border}\n{styled_text}{border}"
    header_panel = Panel(
        Text.from_markup(styled_text),
        border_style=Style(color=NordColors.FROST_1),
        padding=(1, 2),
        title=f"[bold {NordColors.SNOW_STORM_2}]v{VERSION}[/]",
        title_align="right",
        subtitle=f"[bold {NordColors.SNOW_STORM_1}]{APP_SUBTITLE}[/]",
        subtitle_align="center",
    )
    return header_panel


def print_message(
    text: str, style: str = NordColors.FROST_2, prefix: str = "•"
) -> None:
    """Print a styled message with a prefix."""
    console.print(f"[{style}]{prefix} {text}[/{style}]")


def print_success(message: str) -> None:
    print_message(message, NordColors.GREEN, "✓")


def print_warning(message: str) -> None:
    print_message(message, NordColors.YELLOW, "⚠")


def print_error(message: str) -> None:
    print_message(message, NordColors.RED, "✗")


# ---------------------------
# Signal Handling and Cleanup
# ---------------------------
def cleanup() -> None:
    """Cleanup tasks before exiting."""
    print_message("Cleaning up resources...", NordColors.POLAR_NIGHT_3)


def signal_handler(sig, frame) -> None:
    try:
        sig_name = signal.Signals(sig).name
        print_warning(f"Interrupted by {sig_name}")
    except Exception:
        print_warning(f"Interrupted by signal {sig}")
    cleanup()
    sys.exit(128 + sig)


signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


# ---------------------------
# Root Privilege Check
# ---------------------------
def check_root() -> None:
    """Ensure the script is run as root."""
    if os.geteuid() != 0:
        print_error("This script must be run as root. Exiting.")
        sys.exit(1)


# ---------------------------
# Repository Update Functions
# ---------------------------
def update_repository_sources() -> None:
    """
    Update /etc/apt/sources.list and files in /etc/apt/sources.list.d/ by replacing
    occurrences of the old codename with the new Debian stable codename.
    """
    check_root()
    console.clear()
    console.print(create_header())
    print_message(
        "Updating repository sources to use '{}'".format(NEW_CODENAME),
        NordColors.FROST_2,
    )

    files_to_update: List[str] = []

    # Main sources.list file
    if os.path.exists(APT_SOURCES_LIST):
        files_to_update.append(APT_SOURCES_LIST)
    # Additional files in sources.list.d directory
    if os.path.isdir(APT_SOURCES_DIR):
        for file in os.listdir(APT_SOURCES_DIR):
            if file.endswith(".list"):
                files_to_update.append(os.path.join(APT_SOURCES_DIR, file))

    if not files_to_update:
        print_warning("No apt sources files found to update.")
        return

    with Progress(
        SpinnerColumn("dots", style=f"bold {NordColors.FROST_1}"),
        TextColumn("[bold {task.fields[style]}]{task.description}"),
        BarColumn(bar_width=30),
        TaskProgressColumn(),
        console=console,
    ) as progress:
        task = progress.add_task(
            "Updating repositories...",
            total=len(files_to_update),
            style=NordColors.FROST_2,
        )
        for file_path in files_to_update:
            try:
                # Create a backup
                backup_path = file_path + ".bak"
                shutil.copy(file_path, backup_path)
                # Read file and perform replacement
                with open(file_path, "r") as f:
                    content = f.read()
                new_content = content.replace(OLD_CODENAME, NEW_CODENAME)
                with open(file_path, "w") as f:
                    f.write(new_content)
                progress.advance(task)
                print_success(f"Updated {file_path} (backup saved as {backup_path})")
            except Exception as e:
                progress.advance(task)
                print_error(f"Failed to update {file_path}: {str(e)}")
    print_success("Repository sources updated successfully.")


# ---------------------------
# Package Update Functions
# ---------------------------
def update_package_lists() -> None:
    """
    Run 'apt-get update' to refresh package lists.
    """
    check_root()
    console.clear()
    console.print(create_header())
    print_message("Fetching new package lists (apt-get update)...", NordColors.FROST_2)
    try:
        with Progress(
            SpinnerColumn("dots", style=f"bold {NordColors.FROST_1}"),
            TextColumn("[bold {task.fields[style]}]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task(
                "Running apt-get update...", style=NordColors.FROST_2
            )
            subprocess.run(
                ["apt-get", "update"],
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
            progress.advance(task)
        print_success("Package lists updated successfully.")
    except subprocess.CalledProcessError as e:
        print_error(f"apt-get update failed: {e}")
    except Exception as e:
        print_error(f"Unexpected error during update: {e}")


def upgrade_system() -> None:
    """
    Run 'apt-get full-upgrade -y' to perform a full system upgrade.
    """
    check_root()
    console.clear()
    console.print(create_header())
    print_message("Upgrading system (apt-get full-upgrade -y)...", NordColors.FROST_2)
    try:
        with Progress(
            SpinnerColumn("dots", style=f"bold {NordColors.FROST_1}"),
            TextColumn("[bold {task.fields[style]}]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task(
                "Running apt-get full-upgrade...", style=NordColors.FROST_2
            )
            subprocess.run(
                ["apt-get", "full-upgrade", "-y"],
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
            progress.advance(task)
        print_success("System upgraded successfully.")
    except subprocess.CalledProcessError as e:
        print_error(f"System upgrade failed: {e}")
    except Exception as e:
        print_error(f"Unexpected error during upgrade: {e}")


def full_upgrade() -> None:
    """
    Perform the full upgrade process: update repository sources, update package lists,
    and upgrade the system.
    """
    if Confirm.ask(
        f"[bold {NordColors.FROST_2}]Proceed with full upgrade? This will update repositories, refresh package lists, and upgrade the system.[/]"
    ):
        update_repository_sources()
        time.sleep(1)
        update_package_lists()
        time.sleep(1)
        upgrade_system()
    else:
        print_warning("Full upgrade cancelled by user.")


# ---------------------------
# Main Interactive Menu
# ---------------------------
def main() -> None:
    while True:
        console.clear()
        console.print(create_header())
        menu = (
            "\n[bold {0}]1.[/] Update repository sources to '{1}'\n"
            "[bold {0}]2.[/] Update package lists (apt-get update)\n"
            "[bold {0}]3.[/] Upgrade system (apt-get full-upgrade -y)\n"
            "[bold {0}]4.[/] Full upgrade (repositories + update + upgrade)\n"
            "[bold {0}]5.[/] Exit\n"
        ).format(NordColors.FROST_2, NEW_CODENAME)
        console.print(
            Panel(
                Text.from_markup(menu),
                title=f"[bold {NordColors.FROST_3}]Main Menu[/]",
                border_style=NordColors.FROST_3,
            )
        )
        choice = Prompt.ask(f"[bold {NordColors.FROST_2}]Enter your choice[/]").strip()

        if choice == "1":
            update_repository_sources()
            Prompt.ask(
                f"[bold {NordColors.SNOW_STORM_1}]Press Enter to return to the main menu[/]"
            )
        elif choice == "2":
            update_package_lists()
            Prompt.ask(
                f"[bold {NordColors.SNOW_STORM_1}]Press Enter to return to the main menu[/]"
            )
        elif choice == "3":
            upgrade_system()
            Prompt.ask(
                f"[bold {NordColors.SNOW_STORM_1}]Press Enter to return to the main menu[/]"
            )
        elif choice == "4":
            full_upgrade()
            Prompt.ask(
                f"[bold {NordColors.SNOW_STORM_1}]Press Enter to return to the main menu[/]"
            )
        elif choice == "5":
            console.clear()
            console.print(
                Panel(
                    Text(
                        f"Thank you for using {APP_NAME}!",
                        style=f"bold {NordColors.FROST_2}",
                    ),
                    border_style=NordColors.FROST_1,
                    padding=(1, 2),
                )
            )
            break
        else:
            print_error("Invalid selection. Please choose a valid option.")
            time.sleep(1)


# ---------------------------
# Program Entry Point
# ---------------------------
if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        console.print(
            Panel(
                Text(f"Unhandled error: {str(e)}", style=f"bold {NordColors.RED}"),
                border_style=NordColors.RED,
                title="Error",
            )
        )
        sys.exit(1)
