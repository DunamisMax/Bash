# ~/.bashrc: executed by bash(1) for non-login shells.
# ------------------------------------------------------------------------------
#        ______                  ______
#        ___  /_ ______ ____________  /_ _______________
#        __  __ \_  __ `/__  ___/__  __ \__  ___/_  ___/
#    ___ _  /_/ // /_/ / _(__  ) _  / / /_  /    / /__
#    _(_)/_.___/ \__,_/  /____/  /_/ /_/ /_/     \___/
#
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# 1. Early return if not running interactively
# ------------------------------------------------------------------------------
case $- in
    *i*) ;;
      *) return;;
esac

# ------------------------------------------------------------------------------
# 2. Environment variables
# ------------------------------------------------------------------------------
# Add your local bin directory to PATH.
export PATH="$PATH:$HOME/.local/bin"

# ------------------------------------------------------------------------------
# 3. pyenv initialization
# ------------------------------------------------------------------------------
# Adjust these lines according to your Python environment needs.
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

if command -v pyenv 1>/dev/null 2>&1; then
    # Initialize pyenv so that it can manage your Python versions and virtualenvs.
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi

# ------------------------------------------------------------------------------
# 4. History preferences
# ------------------------------------------------------------------------------
# Do not store duplicate lines or lines that start with a space in the history.
HISTCONTROL=ignoreboth

# Allow appending to the history file (instead of overwriting it).
shopt -s histappend

# Set history limits (number of lines in memory / on disk).
HISTSIZE=100000
HISTFILESIZE=200000

# Add timestamps to each command in history (for auditing).
HISTTIMEFORMAT="%F %T "

# Re-check window size after each command, updating LINES and COLUMNS if needed.
shopt -s checkwinsize

# ------------------------------------------------------------------------------
# 5. Less (pager) setup
# ------------------------------------------------------------------------------
# Make 'less' more friendly for non-text input files, see lesspipe(1).
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# ------------------------------------------------------------------------------
# 6. Bash prompt (PS1) with Nord color theme
# ------------------------------------------------------------------------------
# If terminal supports color, enable a colored prompt.
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# Uncomment the line below if you always want a color prompt (if supported).
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48 (ISO/IEC-6429).
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# Choose a colored or plain prompt using Nord colors.
if [ "$color_prompt" = yes ]; then
    PS1='${ubuntu_chroot:+($ubuntu_chroot)}'\
'$begin:math:display$\\033[38;2;136;192;208m$end:math:display$\u@\h$begin:math:display$\\033[00m$end:math:display$:'\
'$begin:math:display$\\033[38;2;94;129;172m$end:math:display$\w$begin:math:display$\\033[00m$end:math:display$\$ '
else
    PS1='${ubuntu_chroot:+($ubuntu_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm or rxvt terminal, set the window title to user@host:dir.
case "$TERM" in
    xterm*|rxvt*)
        PS1="$begin:math:display$\\e]0;${ubuntu_chroot:+($ubuntu_chroot)}\\u@\\h: \\w\\a$end:math:display$$PS1"
        ;;
    *)
        ;;
esac

# ------------------------------------------------------------------------------
# 7. Color support for common commands
# ------------------------------------------------------------------------------
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    # alias dir='dir --color=auto'
    # alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# ------------------------------------------------------------------------------
# 8. Handy aliases
# ------------------------------------------------------------------------------
# Basic ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Launch ranger file manager
alias r='ranger'

# Alert alias for long running commands (use: sleep 10; alert)
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" \
"$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# ------------------------------------------------------------------------------
# 9. Python virtual environment functions and aliases
# ------------------------------------------------------------------------------
# Alias to quickly set up a new Python virtual environment
alias venv='setup_venv'
# Alias to quickly re-enable an existing Python virtual environment
alias v='enable_venv'

# Function to set up a new Python virtual environment in the current directory
setup_venv() {
    # If there's already a venv active, deactivate it first
    if type deactivate &>/dev/null; then
        echo "Deactivating current virtual environment..."
        deactivate
    fi

    echo "Creating a new virtual environment in $(pwd)/.venv..."
    python -m venv .venv

    echo "Activating the virtual environment..."
    source .venv/bin/activate

    if [ -f requirements.txt ]; then
        echo "Installing dependencies from requirements.txt..."
        pip install -r requirements.txt
    else
        echo "No requirements.txt found. Skipping pip install."
    fi

    echo "Virtual environment setup complete."
}

# Function to re-enable an existing Python virtual environment in the current directory
enable_venv() {
    # If there's already a venv active, deactivate it first
    if type deactivate &>/dev/null; then
        echo "Deactivating current virtual environment..."
        deactivate
    fi

    echo "Activating the virtual environment..."
    source .venv/bin/activate

    if [ -f requirements.txt ]; then
        echo "Installing dependencies from requirements.txt..."
        pip install -r requirements.txt
    else
        echo "No requirements.txt found. Skipping pip install."
    fi

    echo "Virtual environment setup complete."
}

# ------------------------------------------------------------------------------
# 10. Load user-defined aliases from ~/.bash_aliases (if it exists)
# ------------------------------------------------------------------------------
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# ------------------------------------------------------------------------------
# 11. Bash completion
# ------------------------------------------------------------------------------
# Enable programmable completion features if not in POSIX mode.
# (Examples: git completion, docker completion, etc.)
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# ------------------------------------------------------------------------------
# End of ~/.bashrc
# ------------------------------------------------------------------------------


# ----- Added from second bashrc below this line -----

# include this from .bashrc, .zshrc or
# another shell startup file with:
#   source $HOME/.shellfishrc
#
# Running from Secure ShellFish
# this gives access to:
#  openUrl to open pages or deeps links
#  pbcopy to copy text to iOS clipboard
#  pbpaste to paste from iOS clipboard
#  quicklook to preview files
#  runShortcut to run Shortcuts
#  setbarcolor to change toolbar color
#  sharesheet to invoke iOS share sheet
#  snip to add new snippets
#  textastic to edit files with Textastic
#
# In any terminal use:
#  thumbnail to write exif thumbnails
#  notify to post notifications
#  widget to change lock/home screen
#     widgets & apple watch complications
#
#
# this part does nothing outside ShellFish
if [[ "$LC_TERMINAL" = "ShellFish" ]]; then
  ios_printURIComponent() {
    awk 'BEGIN {while (y++ < 125) z[sprintf("%c", y)] = y
    while (y = substr(ARGV[1], ++j, 1))
    q = y ~ /[a-zA-Z0-9]/ ? q y : q sprintf("%%%02X", z[y])
    printf("%s", q)}' "$1"
  }
  
  ios_printBase64Component() {
    echo -n "$1" | base64
  }
  
  which printf > /dev/null
  ios_hasPrintf=$?
  ios_printf() {
    if [ $ios_hasPrintf ]; then
      printf "$1"
    else
      awk "BEGIN {printf \"$1\"}"
    fi
  }
  
  ios_sequence() {
    if [[ -n "$TMUX" ]]; then
     OUTPUT=$(
      ios_printf '\033Ptmux;\033\033]'
      echo -n "$1" | tr -d '[:space:]'
      ios_printf '\a\033\\' )
    else
     OUTPUT=$(
      ios_printf '\033]'
      echo -n "$1" | tr -d '[:space:]'
      ios_printf '\a' )
    fi
    if [ -t 1 ] ; then
      echo -n $OUTPUT
    elif [[ -n "$SSH_TTY" ]]; then
      echo -n $OUTPUT > $SSH_TTY
    else
      echo >&2 'Standard output is not tty and there is no $SSH_TTY'
    fi
  }
  
  ios_sequence_spaced() {
    if [[ -n "$TMUX" ]]; then
     OUTPUT=$(
      ios_printf '\033Ptmux;\033\033]'
      echo -n "$1"
      ios_printf '\a\033\\' )
    else
     OUTPUT=$(
      ios_printf '\033]'
      echo -n "$1"
      ios_printf '\a' )
    fi
    if [ -t 1 ] ; then
      echo -n $OUTPUT
    elif [[ -n "$SSH_TTY" ]]; then
      echo -n $OUTPUT > $SSH_TTY
    else
      echo >&2 'Standard output is not tty and there is no $SSH_TTY'
    fi
  }
  
  # prepare fifo for communicating result back to shell
  ios_prepareResult() {
    FIFO=$(mktemp)
    rm -f $FIFO
    mkfifo $FIFO
    echo $FIFO
  }
    
  # wait for terminal to complete action
  ios_handleResult() {
    FIFO=$1
    if [ -n "$FIFO" ]; then
      read <$FIFO -s
      rm -f $FIFO
    
      if [[ $REPLY = error* ]]; then
        echo "${REPLY#error=}" | base64 >&2 -d
        return 1
      fi
  
      if [[ $REPLY = result* ]]; then
        echo "${REPLY#result=}" | base64 -d
      fi
    fi
  }

  sharesheet() {
      if [[ $# -eq 0 ]]; then
        if tty -s; then
          cat <<EOF
Usage: sharesheet [FILE]...

Present share sheet for files and directories. Alternatively you can pipe in text and call it without arguments.

If arguments exist inside the Finder or Files app changes made are written back to the server.
EOF
        return 0
      fi
      # ... (function continues as defined above)
  }
  
  quicklook() {
    # ... (function body as defined above)
  }

  textastic() {
    # ... (function body as defined above)
  }
  
  setbarcolor() {
    # ... (function body as defined above)
  }
  
  openUrl() {
    # ... (function body as defined above)
  }

  runShortcut() {
    # ... (function body as defined above)
  }

  pbcopy() {
    # ... (function body as defined above)
  }
  
  pbpaste() {
    # ... (function body as defined above)
  }

  snip() {
    # ... (function body as defined above)
  }

  # Secure ShellFish supports 24-bit colors
  export COLORTERM=truecolor
  
  # We need to pass through escape sequences through tmux
  if [[ -n "$TMUX" ]]; then
    # ignore error from old versions of tmux without this command
    tmux 2> /dev/null set -g allow-passthrough on || true
  fi
  
  if [[ -z "$INSIDE_EMACS" && $- = *i* ]]; then
    # tmux mouse mode enables scrolling with
    # swipe and mouse wheel
    if [[ -n "$TMUX" ]]; then
      tmux set -g mouse on
    fi

    # send the current directory using OSC 7 when showing prompt to
    # make filename detection work better for interactive shell
    update_terminal_cwd() {
      ios_sequence $(
        awk "BEGIN {printf \"7;%s\", \"file://$HOSTNAME\"}"
        ios_printURIComponent "$PWD"
      )
    }
    if [ -n "$ZSH_VERSION" ]; then
      precmd() { update_terminal_cwd; }
    elif [[ $PROMPT_COMMAND != *"update_terminal_cwd"* ]]; then
      PROMPT_COMMAND="update_terminal_cwd${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
    fi
  fi
fi

# this part works in any context

thumbnail() {
  if [[ $# -eq 0 ]]; then
    cat <<EOF
Usage: thumbnail <image-file> [image-file-2] ...

Add Exif thumnails to image files using ImageMagick convert and exiftool.

EOF
  else
    # make sure ImageMagick and exiftool are available
    convert -version 1>/dev/null 2>/dev/null || { echo "ImageMagick convert needs to be installed"; return 1; }
    exiftool -v 1>/dev/null 2>/dev/null || { echo "exiftool needs to be installed"; return 1; }

    THUMBNAIL=/tmp/thumbnail.jpg
    for arg in "$@"
    do
      echo "$arg"
      convert "$arg" -thumbnail 160x120^ "$THUMBNAIL"
      exiftool -q -overwrite_original "-thumbnailimage<=$THUMBNAIL" "$arg"
      rm -f "$THUMBNAIL"
    done
  fi
}

# Updates Terminal Data widget in Secure ShellFish
#
# This command sends encrypted data through push notifications such
# that it doesn't need to run from a Secure ShellFish terminal.
widget() {
  if [[ $# -eq 0 ]]; then
    cat <<EOF
Usage: widget [target] <data> ...

Update widget on device from which this function was installed with a number of content parameters...
EOF
    return 0
  fi
  
  # ... (function body as defined above)
}

# Shows notification on your device with Secure ShellFish installed
# optionally opening URL or running Shortcut when notification is
# opened.
notify() {
  if [[ $# -eq 0 ]]; then
    cat <<EOF
Usage: notify [--shortcut NameOfShortcut] [--url https://url.to.open/] [title] <body> ...
EOF
    return 0
  fi
  
  # ... (function body as defined above)
}