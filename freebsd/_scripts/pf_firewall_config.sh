#!/usr/local/bin/bash
#
# FreeBSD Firewall Setup Script
#
# This script configures PF (Packet Filter) to:
#   - Allow incoming SSH (22), HTTP (80), and HTTPS (443) traffic.
#   - Allow Plex traffic: TCP port 32400 and UDP ports 1900, 32410, 32412, 32413, 32414.
#   - Block all other incoming connections.
#
# Usage: Run as root.
#
set -Eeuo pipefail
IFS=$'\n\t'

# Simple logging function
log() {
    local level="${1:-INFO}"
    shift
    local message="$*"
    local timestamp
    timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] [$level] $message"
}

# Ensure script is run as root
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        log ERROR "This script must be run as root. Exiting."
        exit 1
    fi
}

# Backup existing pf.conf if it exists
backup_pf_conf() {
    local pf_conf="/etc/pf.conf"
    if [ -f "$pf_conf" ]; then
        local backup="/etc/pf.conf.backup.$(date +%Y%m%d%H%M%S)"
        cp "$pf_conf" "$backup"
        log INFO "Existing pf.conf backed up to $backup"
    else
        log INFO "No existing /etc/pf.conf found. Continuing."
    fi
}

# Detect the default external interface
detect_ext_if() {
    local iface
    iface=$(route -n get default 2>/dev/null | awk '/interface:/{print $2}')
    if [ -z "$iface" ]; then
        log ERROR "Could not determine the external interface. Please set it manually."
        exit 1
    fi
    echo "$iface"
}

# Generate a new pf.conf file with the desired rules
generate_pf_conf() {
    local ext_if="$1"
    local pf_conf="/etc/pf.conf"
    log INFO "Generating new $pf_conf with external interface: $ext_if"

    cat <<EOF > "$pf_conf"
#
# pf.conf generated by firewall_setup.sh on $(date)
#

# Define external interface
ext_if = "$ext_if"

# Skip filtering on loopback
set skip on lo

# Normalize and scrub packets
scrub in all

# Default: block all incoming, allow outgoing (with state tracking)
block in all
pass out all keep state

# Allow incoming SSH, HTTP, and HTTPS
pass in on \$ext_if proto tcp from any to (\$ext_if) port { 22, 80, 443 } flags S/SA keep state

# Allow Plex TCP (default web access port)
pass in on \$ext_if proto tcp from any to (\$ext_if) port 32400 keep state

# Allow Plex UDP ports for discovery and streaming
pass in on \$ext_if proto udp from any to (\$ext_if) port { 1900, 32410, 32412, 32413, 32414 } keep state
EOF

    log INFO "New pf.conf generated."
}

# Enable and reload PF
enable_and_reload_pf() {
    # Enable PF at boot if not already enabled
    if ! sysrc -n pf_enable 2>/dev/null | grep -q "YES"; then
        sysrc pf_enable="YES"
        log INFO "Set pf_enable to YES in rc.conf."
    fi

    # Start PF if not running
    if ! service pf status >/dev/null 2>&1; then
        service pf start
        log INFO "PF service started."
    else
        log INFO "Reloading PF configuration..."
        pfctl -f /etc/pf.conf && log INFO "PF configuration reloaded successfully."
    fi
}

main() {
    check_root
    backup_pf_conf
    local ext_if
    ext_if=$(detect_ext_if)
    generate_pf_conf "$ext_if"
    enable_and_reload_pf
    log INFO "Firewall configuration complete."
}

main "$@"